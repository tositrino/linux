diff -Naur linux-2.6.24-org/include/asm-sparc64/segment.h linux-2.6.24-id/include/asm-sparc64/segment.h
--- linux-2.6.24-org/include/asm-sparc64/segment.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.24-id/include/asm-sparc64/segment.h	2008-01-25 11:11:12.725186285 +0100
@@ -0,0 +1,6 @@
+#ifndef _ASM_SEGMENT_H
+#define _ASM_SEGMENT_H
+
+#include <asm/cache.h>
+
+#endif
## From:   Aurelien Jarno <aurelien@aurel32.net>
## To:  Thomas Gleixner <tglx@linutronix.de>, Ingo Molnar <mingo@redhat.com>, "H. Peter Anvin" <hpa@zytor.com>
## Subject:  [PATCH] x86: Clear DF before calling signal handler
## Date:  Wed, 5 Mar 2008 19:14:24 +0100
## Message-ID:  <20080305181424.GA12678@hall.aurel32.net>
## Cc:  linux-kernel@vger.kernel.org
## Archive-link:  Article, Thread
## 
## The Linux kernel currently does not clear the direction flag before
## calling a signal handler, whereas the x86/x86-64 ABI requires that.
## This become a real problem with gcc version 4.3, which assumes that
## the direction flag is correctly cleared at the entry of a function.
## 
## This patches changes the setup_frame() functions to clear the
## direction before entering the signal handler.
## 
## Signed-off-by: Aurelien Jarno <aurelien@aurel32.net>
## ---
##  arch/x86/ia32/ia32_signal.c |    4 ++--
##  arch/x86/kernel/signal_32.c |    4 ++--
##  arch/x86/kernel/signal_64.c |    2 +-
##  3 files changed, 5 insertions(+), 5 deletions(-)
## 
diff --git a/arch/x86/ia32/ia32_signal.c b/arch/x86/ia32/ia32_signal.c
index 1c0503b..5e7771a 100644
--- a/arch/x86/ia32/ia32_signal.c
+++ b/arch/x86/ia32/ia32_signal.c
@@ -500,7 +500,7 @@ int ia32_setup_frame(int sig, struct k_sigaction *ka,
 regs->ss = __USER32_DS;
 
 set_fs(USER_DS);
-regs->flags &= ~X86_EFLAGS_TF;
+regs->flags &= ~(X86_EFLAGS_TF | X86_EFLAGS_DF);
 if (test_thread_flag(TIF_SINGLESTEP))
 ptrace_notify(SIGTRAP);
 
@@ -600,7 +600,7 @@ int ia32_setup_rt_frame(int sig, struct k_sigaction *ka, siginfo_t *info,
 regs->ss = __USER32_DS;
 
 set_fs(USER_DS);
-regs->flags &= ~X86_EFLAGS_TF;
+regs->flags &= ~(X86_EFLAGS_TF | X86_EFLAGS_DF);
 if (test_thread_flag(TIF_SINGLESTEP))
 ptrace_notify(SIGTRAP);
 
diff --git a/arch/x86/kernel/signal_32.c b/arch/x86/kernel/signal_32.c
index caee1f0..0157a6f 100644
--- a/arch/x86/kernel/signal_32.c
+++ b/arch/x86/kernel/signal_32.c
@@ -407,7 +407,7 @@ static int setup_frame(int sig, struct k_sigaction *ka,
  * The tracer may want to single-step inside the
  * handler too.
  */
-regs->flags &= ~TF_MASK;
+regs->flags &= ~(TF_MASK | X86_EFLAGS_DF);
 if (test_thread_flag(TIF_SINGLESTEP))
 ptrace_notify(SIGTRAP);
 
@@ -500,7 +500,7 @@ static int setup_rt_frame(int sig, struct k_sigaction *ka, siginfo_t *info,
  * The tracer may want to single-step inside the
  * handler too.
  */
-regs->flags &= ~TF_MASK;
+regs->flags &= ~(TF_MASK | X86_EFLAGS_DF);
 if (test_thread_flag(TIF_SINGLESTEP))
 ptrace_notify(SIGTRAP);
 
diff --git a/arch/x86/kernel/signal_64.c b/arch/x86/kernel/signal_64.c
index 7347bb1..56b72fb 100644
--- a/arch/x86/kernel/signal_64.c
+++ b/arch/x86/kernel/signal_64.c
@@ -295,7 +295,7 @@ static int setup_rt_frame(int sig, struct k_sigaction *ka, siginfo_t *info,
    see include/asm-x86_64/uaccess.h for details. */
 set_fs(USER_DS);
 
-regs->flags &= ~X86_EFLAGS_TF;
+regs->flags &= ~(X86_EFLAGS_TF | X86_EFLAGS_DF);
 if (test_thread_flag(TIF_SINGLESTEP))
 ptrace_notify(SIGTRAP);
 #ifdef DEBUG_SIG
